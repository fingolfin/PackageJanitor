name: Tests

on:
  push:
    branches:
      - "master"
      - "*-ci"
  pull_request:
  schedule:
    - cron: "0 4 * * *" # after gap-docker(-master) is rebuilt
  workflow_dispatch:

jobs:
  test:
    strategy:
      matrix:
        image: ["ghcr.io/homalg-project/gap-docker:latest", "ghcr.io/homalg-project/gap-docker-master:latest"]
      fail-fast: false
    runs-on: ubuntu-latest
    container:
      image: {% raw %}${{ matrix.image }}{% endraw %}
    steps:
      # keep workflow active even if repository has no activity for 60 days (do not execute for pull requests)
      - run: '[ "$GITHUB_EVENT_NAME" = "pull_request" ] || curl --fail -X PUT -H "Accept: application/vnd.github.v3+json" -H "Authorization: token {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}" https://api.github.com/repos/$GITHUB_REPOSITORY/actions/workflows/Tests.yml/enable'
      - uses: actions/checkout@v3
      - run: cp -a $GITHUB_WORKSPACE /home/gap/.gap/pkg/
      - run: |
          export HOME="/home/gap"
          cd /home/gap/.gap/pkg/
        {%- if ci_ubuntu_additional_apt_packages is defined %}
          sudo apt update
          sudo apt install -y{% for apt_package in ci_ubuntu_additional_apt_packages %} {{ apt_package }}{% endfor %}
        {%- endif %}
          cp ./{{ package.name }}/ci_gaprc /home/gap/.gap/gaprc
          git clone --depth 1 https://github.com/gap-packages/AutoDoc.git
        {%- for additional_repo in ci_additional_repositories_enriched %}
          git clone --depth 1 https://github.com/{% if "/" not in additional_repo %}homalg-project/{% endif %}{{ additional_repo }}.git
        {%- endfor %}
          # set SOURCE_DATE_EPOCH for reproducible PDFs
          export SOURCE_DATE_EPOCH=0
          # build documentation of packages which we might want to reference, keep this in sync with `release-gap-package`
        {%- for package_with_doc in ["CAP_project/CAP", "CAP_project/CompilerForCAP", "CAP_project/MonoidalCategories", "CAP_project/CartesianCategories", "CAP_project/FreydCategoriesForCAP", "HigherHomologicalAlgebra/ToolsForHigherHomologicalAlgebra", "homalg_project/homalg", "homalg_project/Modules", "Toposes" ] %}
          [ -d "{{ package_with_doc }}" ] && make -C "{{ package_with_doc }}" doc
        {%- endfor %}
        {%- if ci_do_not_run_tests is not defined or not ci_do_not_run_tests %}
          make -C {{ package.name }} -j $(nproc) --output-sync ci-test
        {%- else %}
          make -C {{ package.name }} -j $(nproc) --output-sync doc
        {%- endif %}
        {%- for package_to_test in ci_packages_to_test %}
          make -C {{ package_to_test }} -j $(nproc) --output-sync ci-test
        {%- endfor %}
        {%- if ci_do_not_run_tests is not defined or not ci_do_not_run_tests %}
          cp ./{{ package.name }}/.codecov.yml ./
          (cd {{ package.name }} && LANG=C.UTF-8 python3 process_coverage.py)
          [ "$GITHUB_EVENT_NAME" != "schedule" ] && [ "{% raw %}${{ matrix.image }}{% endraw %}" = "ghcr.io/homalg-project/gap-docker-master:latest" ] && ./{{ package.name }}/upload_codecov.sh
        {%- endif %}
          git config --global user.name "Bot"
          git config --global user.email "empty"
          cd {{ package.name }}
          CUR_SHA=$(git rev-parse --verify HEAD)
        {%- if ci_automated_release is not defined or ci_automated_release %}
          if [ "{% raw %}${{ matrix.image }}{% endraw %}" = "ghcr.io/homalg-project/gap-docker:latest" ] && [ "$CUR_SHA" = "$(git rev-parse origin/master)" ] && [ $(dirname "$GITHUB_REPOSITORY") = "homalg-project" ]; then \
            git fetch origin gh-pages; \
            git worktree add gh-pages/ gh-pages || (echo "There was an error. Make sure there is a branch named 'gh-pages'. See https://github.com/homalg-project/PackageJanitor#error-there-was-an-error-make-sure-there-is-a-branch-named-gh-pages"; exit 1); \
            git checkout master; \
            LANG=C.UTF-8 ./make_dist.sh --token "{% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}"; \
      {%- if is_meta_package %}
            # publish subsplits
        {%- for subpackage in subpackages %}
		  {%- if subpackage.has_subsplit is defined and subpackage.has_subsplit %}
            git subtree split --prefix={{ subpackage.name }} -b {{ subpackage.name }}-split && git push https://homalg-project:{% raw %}${{ secrets.SUBSPLIT_PUSH_SECRET }}{% endraw %}@github.com/homalg-project/{{ subpackage.name }} {{ subpackage.name }}-split:master; \
          {%- endif %}
        {%- endfor %}
      {%- endif %}
          else \
            echo "Not making a release."; \
          fi
        {%- endif %}
