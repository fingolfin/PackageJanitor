---
- import_tasks: tasks/README.md.yml
  vars:
    is_meta_package: false

- name: PackageInfo.g PackageName
  lineinfile:
    path: "{{ pkg_dir }}/{{ package.path }}/PackageInfo.g"
    regexp: "PackageName :="
    line: 'PackageName := "{{ package.name }}",'

- name: PackageInfo.g Subtitle
  lineinfile:
    path: "{{ pkg_dir }}/{{ package.path }}/PackageInfo.g"
    regexp: "Subtitle :="
    line: 'Subtitle := "{{ package.description }}",'

- name: PackageInfo.g License
  lineinfile:
    path: "{{ pkg_dir }}/{{ package.path }}/PackageInfo.g"
    regexp: "License :="
    line: 'License := "GPL-2.0-or-later",'
    insertafter: "Date :="

- name: PackageInfo.g Date
  lineinfile:
    path: "{{ pkg_dir }}/{{ package.path }}/PackageInfo.g"
    regexp: "Date :="
    line: 'Date := Concatenation( "01/", ~.Version{[ 6, 7 ]}, "/", ~.Version{[ 1 .. 4 ]} ),'

- name: PackageInfo.g URLs
  blockinfile:
    path: "{{ pkg_dir }}/{{ package.path }}/PackageInfo.g"
    marker: "# {mark} URLS"
    block: |
      SourceRepository := rec(
          Type := "git",
      {% if meta_package is defined %}
          URL := "https://github.com/homalg-project/{{ meta_package.name }}",
      {% else %}
          URL := "https://github.com/homalg-project/{{ package.name }}",
      {% endif %}
      ),
      IssueTrackerURL := Concatenation( ~.SourceRepository.URL, "/issues" ),
      PackageWWWHome  := "https://homalg-project.github.io/{{ package.path }}",
      PackageInfoURL  := "https://homalg-project.github.io/{{ package.path }}/PackageInfo.g",
      README_URL      := "https://homalg-project.github.io/{{ package.path }}/README.md",
      {% if meta_package is defined -%}
        ArchiveURL      := Concatenation( "https://github.com/homalg-project/{{ meta_package.name }}/releases/download/{{ package.name }}-", ~.Version, "/{{ package.name }}-", ~.Version ),
      {% else -%}
        ArchiveURL      := Concatenation( "https://github.com/homalg-project/{{ package.name }}/releases/download/v", ~.Version, "/{{ package.name }}-", ~.Version ),
      {% endif %}

- name: PackageInfo.g ArchiveFormats
  lineinfile:
    path: "{{ pkg_dir }}/{{ package.path }}/PackageInfo.g"
    regexp: "ArchiveFormats :="
    line: 'ArchiveFormats := ".tar.gz .zip",'

- name: PackageInfo.g PackageDoc.BookName
  lineinfile:
    path: "{{ pkg_dir }}/{{ package.path }}/PackageInfo.g"
    regexp: "^  BookName  := "
    line: '  BookName  := "{{ package.name }}",'

- name: PackageInfo.g PackageDoc.LongTitle
  lineinfile:
    path: "{{ pkg_dir }}/{{ package.path }}/PackageInfo.g"
    regexp: "^  LongTitle := "
    line: '  LongTitle := "{{ package.description }}",'
  when: not package.docu_only

- name: init.g header
  replace:
    path: "{{ pkg_dir }}/{{ package.path }}/init.g"
    regexp: "\\A(.*\n){5}"
    replace: |
      # SPDX-License-Identifier: GPL-2.0-or-later
      # {{ package.name }}: {{ package.description }}
      #
      # Reading the declaration part of the package.
      #
  when: not package.docu_only

- name: read.g header
  replace:
    path: "{{ pkg_dir }}/{{ package.path }}/read.g"
    regexp: "\\A(.*\n){5}"
    replace: |
      # SPDX-License-Identifier: GPL-2.0-or-later
      # {{ package.name }}: {{ package.description }}
      #
      # Reading the implementation part of the package.
      #
  when: not package.docu_only

- name: PackageInfo.g header
  replace:
    path: "{{ pkg_dir }}/{{ package.path }}/PackageInfo.g"
    regexp: "\\A(.*\n){8}"
    replace: |
      # SPDX-License-Identifier: GPL-2.0-or-later
      # {{ package.name }}: {{ package.description }}
      #
      # This file contains package meta data. For additional information on
      # the meaning and correct usage of these fields, please consult the
      # manual of the "Example" package as well as the comments in its
      # PackageInfo.g file.
      #
  when: not package.docu_only

- name: "Declaration headers"
  replace:
    path: "{{ cur_path }}"
    regexp: "\\A(.*\n){5}"
    replace: |
      # SPDX-License-Identifier: GPL-2.0-or-later
      # {{ package.name }}: {{ package.description }}
      #
      # Declarations
      #
  with_fileglob: "{{ pkg_dir }}/{{ package.path }}/gap/*.gd"
  loop_control:
    loop_var: cur_path
  when: not package.docu_only

- name: "Implementation headers"
  replace:
    path: "{{ cur_path }}"
    regexp: "\\A(.*\n){5}"
    replace: |
      # SPDX-License-Identifier: GPL-2.0-or-later
      # {{ package.name }}: {{ package.description }}
      #
      # Implementations
      #
  with_fileglob: "{{ pkg_dir }}/{{ package.path }}/gap/*.gi"
  loop_control:
    loop_var: cur_path
  when: not package.docu_only

- name: "Ensure {{ pkg_dir }}/{{ package.path }}/tst/ exists"
  file:
    path: "{{ pkg_dir }}/{{ package.path }}/tst/"
    state: directory
  when: not package.docu_only

- name: 000_LoadPackage.tst
  template:
    src: 000_LoadPackage.tst.j2
    dest: "{{ pkg_dir }}/{{ package.path }}/tst/000_LoadPackage.tst"
  vars:
    tests_packages_to_load: "{{ [ package.name ] + (package.tests_additional_packages_to_load | default([])) }}"
  when: not package.docu_only

- name: LICENSE
  copy:
    src: LICENSE
    dest: "{{ pkg_dir }}/{{ package.path }}/LICENSE"
  when: not package.docu_only

- name: makedoc.g
  template:
    src: makedoc.g.j2
    dest: "{{ pkg_dir }}/{{ package.path }}/makedoc.g"
    trim_blocks: false
  when: not package.docu_only

- name: makedoc_with_overfull_hbox_warnings.g
  template:
    src: makedoc_with_overfull_hbox_warnings.g.j2
    dest: "{{ pkg_dir }}/{{ package.path }}/makedoc_with_overfull_hbox_warnings.g"
    trim_blocks: false
  when: not package.docu_only

- name: "Ensure {{ pkg_dir }}/{{ package.path }}/doc/ exists"
  file:
    path: "{{ pkg_dir }}/{{ package.path }}/doc/"
    state: directory
  when: not package.docu_only

- name: Doc.autodoc
  copy:
    src: Doc.autodoc
    dest: "{{ pkg_dir }}/{{ package.path }}/doc/Doc.autodoc"
    force: no
  when: not package.docu_only

- name: clean
  copy:
    src: clean
    dest: "{{ pkg_dir }}/{{ package.path }}/doc/clean"
    mode: a+x
  when: not package.docu_only

- name: makefile
  template:
    src: makefile.j2
    dest: "{{ pkg_dir }}/{{ package.path }}/makefile"
  when: not package.docu_only

- name: testall.g
  template:
    src: testall.g.j2
    dest: "{{ pkg_dir }}/{{ package.path }}/tst/testall.g"
  when: not package.docu_only

- name: .gitignore
  template:
    src: .gitignore.j2
    dest: "{{ pkg_dir }}/{{ package.path }}/.gitignore"
  when: not package.docu_only
